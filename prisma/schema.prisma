// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(cuid())
  phone      String  @unique
  name       String
  password   String
  image      Image?  @relation(fields: [imageId], references: [id])
  role       Role    @default(USER)
  isVerified Boolean @default(false)

  verificationCode Int?
  verificationDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  imageId   String?
  Review    Review[]

  username String? @unique
  bio      String?
  website  String?
  gender   String?

  BookedDay BookedDay[]
  TimeSlot  TimeSlot[]

  @@index([imageId])
}

enum Role {
  USER
  ADMIN
  DOCTOR
}

model Image {
  id         String   @id @default(cuid())
  url        String   @db.Text
  key        String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User[]

  Gallery   Gallery? @relation(fields: [galleryId], references: [id])
  galleryId String?
}

model DateTag {
  id   String @id @default(cuid())
  time String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Review {
  id String @id @default(uuid())

  comment    String   @db.Text
  rating     Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  isFaq Boolean @default(false)

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@index([userId])
}

model Gallery {
  id          String  @id @default(uuid())
  name        String?
  description String?
  images      Image[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Availability {
  id           String       @id @default(cuid())
  availableDay String
  disableDays  SpecialDay[]

  times TimeSlot[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model TimeSlot {
  id   String @id @default(cuid())
  slot String

  bookedDays BookedDay[]

  Availability   Availability? @relation(fields: [availabilityId], references: [id], onUpdate: Cascade)
  availabilityId String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // @@index([availabilityId])
  // @@index([userId])
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model BookedDay {
  id       String  @id @default(cuid())
  day      String
  isBooked Boolean @default(false)

  timeSlot   TimeSlot? @relation(fields: [timeSlotId], references: [id])
  timeSlotId String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([timeSlotId])
}

model SpecialDay {
  id  String @id @default(cuid())
  day String

  Availability   Availability? @relation(fields: [availabilityId], references: [id], onDelete: Cascade)
  availabilityId String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
